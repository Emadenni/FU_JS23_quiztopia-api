org: emanuelejs23
service: QUIZTOPIA-API
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION}
  iam:
    role: ${env:IAM_ROLE_ARN}
  environment:
    USERS_TABLE: ${env:USERS_TABLE}
    QUIZZES_TABLE: ${env:QUIZZES_TABLE}
    SCORES_TABLE: ${env:SCORES_TABLE}  
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UsernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    QuizzesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:QUIZZES_TABLE}
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:SCORES_TABLE}
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

functions:
  createUser:
    handler: functions/users/createUser/index.handler
    events:
      - httpApi:
          path: /users
          method: post

  loginUser:
    handler: functions/users/loginUser/index.handler
    events:
      - httpApi:
          path: /login
          method: post

  createQuiz:
    handler: functions/quizzes/createQuiz/index.handler
    events:
      - httpApi:
          path: /quizzes
          method: post

  getQuizzes:
    handler: functions/quizzes/getQuizzes/index.handler
    events:
      - httpApi:
          path: /quizzes
          method: get

  getQuiz:
    handler: functions/quizzes/getQuiz/index.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}
          method: get

  deleteQuiz:
    handler: functions/quizzes/deleteQuiz/index.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}
          method: delete

  addQuestion:
    handler: functions/quizzes/addQuestion/index.handler
    events:
      - httpApi:
          path: /quizzes/questions/{quizId}
          method: post

  leaderboard:
    handler: functions/scores/leaderboard/index.handler
    events:
      - httpApi:
          path: /quizzes/{quizId}/leaderboard
          method: get

  registerPoints:  
    handler: functions/scores/registerPoints/index.handler
    events:
      - httpApi:
          path: /quizzes/score/{quizId}/{questionId}
          method: put
